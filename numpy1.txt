
import numpy as np
num1=np.array([1,2,3,4,5,6])#one dimensions array
print(ns)




#2 d array dimensions
nps=np.array([ [1,2,3,4,5],
              [0,9,8,7,6]
              ])

#3dimension s array
nd=np.array([[[1,2,3,4,5,6],
              [0,9,8,7,6,8]]])           
#range
ar=np.arange(2,22,2)
print(ar)

#zeros
z=np.zeros([3,4,2], dtype="int32")

"""
The shape (3, 4, 2) means:

3 blocks (depth),

4 rows,

2 columns.

"""
print(z)
z[1][1][1]=82
print(z)

#ones
print(n4)
o=np.ones([3,5,2] , dtype="int32")
print(o)
e=np.empty([2,3,4],dtype="int32")
print(e)
e.fill(82)
print(e)
nn=np.linspace(1, 22,5)
print(nn)
print(dsa[1])

"""
Arry creation i 

"""
#---------------------------arrays creation-----------------------------------------------------------------
#*********************************
#***********************************************************************************"**


#array" access



"""
"# to access array values  - access by index numbers
print(n1[3])
print(n2[1,3])
print(n2[1,4])
print(nn[3])
print(ns[1,:]) #to print entre row
print(n1[-1])
print(ns[:])
print(b[:,1])#column
print(b[1,:])#row
print(ns[:,2]) # 2 is a column
print(ns)
n4[1,1,1]=23 #change value by accessing index in 3d array"""
#to access array value by index
import numpy as np
num1=np.array([1,4,3,5,6,8,99])
print(num1[3])
print(num1[1:4])
print(num1[1:])
print(num1[:4])

print(ns[3])
e[0,1,3]=98
print(e[0,1,3])
print(e)
print(nps[1,:])
print(nps)
print(nps[:,1])
print(nps[:])# Prints the whole array

import numpy as np

# Creating a 3D array (2 blocks, 3 rows, 4 columns)
arr = np.array([
    [  # Block 0
        [1, 2, 3, 4,1],  
        [5, 6, 7, 8,5],  
        [9, 10, 11, 2,12]  
    ],
    [  # Block 1
        [13, 14, 15,5, 16],  
        [17, 18, 19,1.3, 20],  
        [21, 22, 23,7, 24]  
    ]
])

print(arr[1,1,3])
print(arr[0,1,:])
print(arr[1,:,2])

import numpy as np
arr = np.array([[1, 2, 3, 4], 
                [5, 6, 7, 8], 
                [9, 10, 11, 12]])
print(arr[1:2,1:3])
import numpy as np

arr2D = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

rows = [1, 2]  # Select first two rows
cols = [2, 0]  # Select second and third columns
 #2:1, 2:2

print(arr2D[rows, cols]) 
import numpy as np
arr = np.array([[1, 2, 3, 4], 
                [5, 6, 7, 8], 
                [9, 10, 11, 12]])

# Extracting specific rows and columns
print(arr[1:3, 1:4])  # Extracts rows 0-1 and columns 1-2
#-------------------------------------------------------------------------------------------------------------
#****************************************ACCESS ELEMENT*********************************
#----------------------------------------------------------------------
#size & shape

#size and shape
"""
print(nn3.ndim) #print how many dimendions
print(nn3)
print(nn3.shape)#shapes = 3,5
print(nn3.size)#how many elements in the array
print(nn3.itemsize)#storage for each elements,
print(nn3.nbytes)#total noo of size for sstore each elements 4*15

"""

print(e.ndim)
print(ar.ndim)
print(nd.ndim)
print(nps.ndim)
print(z.ndim)
print(z.size)
print(z.nbytes)
print(o.shape)
print(o.nbytes)

#-----------------------------------------------------------------------------------------------
########33 SIZE SHAPE
#--------------===============================-0-----------

"""
sorting
import numpy as np

# Creating a 2D NumPy array
arr = np.array([
    [34, 12, 5],
    [23, 45, 9],
    [89, 1, 67]
])

print("Original Array:")
print(arr)

# Sorting along axis=0 (column-wise sorting)
sorted_axis0 = np.sort(arr, axis=0)
print("\nSorted along axis=0 (column-wise):")
print(sorted_axis0)

# Sorting along axis=1 (row-wise sorting)
sorted_axis1 = np.sort(arr, axis=1)
print("\nSorted along axis=1 (row-wise):")
print(sorted_axis1)


np.sort(nps, axis=0): Sorts each column individually in ascending order.
np.sort(nps, axis=1): Sorts each row individually.

"""
#sorting
dd=np.array([1,2,3,4,5,6,7,8,9,0])
ds=np.sort(nps,axis=0)
print(ds)
#-----------------------------------------------------------------------------------------------------
#



"""


#reshapping and array conversion
gg=np.arange(10)
print(gg)
#reshape 
gs=gg.reshape( 5,2)
print(gs)
gt=gg.reshape(2,5)
print(gt)

p1=np.arange(2,8)
print(p1)
p2=np.arange(9,15)
print(p2)
#concadnation
p3=np.concatenate( (p1, p2,md))#combine 3 into 1 
print(p3)

hu=np.arange(2,21,2)
print(hu)
hg=hu.reshape(2,5)
print(hg) 





"""
#Data AnLTICS - MISSING VALUES
import numpy as np

arr = np.array([10, np.nan, 30, 40, np.nan, 60, np.nan,23, np.nan,])  # np.nan represents missing values
arrs = arr[np.isnan(arr)]  # Remove missing values
ar = arr[~np.isnan(arr)]  # Remove missing values

print(arrs)
print(ar)
#------------Normalization
import numpy as np

# Original Data
data = np.array([100, 200, 300, 400, 500])

# Min-Max Normalization Formula
#n = (data - np.min(data)) / (np.max(data) - np.min(data))
n=(data-np.min(data))/(np.max(data)-np.min(data))
# Print the normalized data
print(n)












nf=np.arange(8)
print(nf)
hj=nf.reshape(4, 2)
print(hj)
pd=np.arange(9)
print(pd)
dg=pd.reshape(3,3)
print(dg)

#------------------------------------------------------------------------------------------------------
""" STACK AND SPLIT"""
a=np.array([[1,2,34],[9,8,7]])
b=np.array([[7,6,5],[4,5,6]])
dd=np.hstack((a,b))# it join horizontally 
print(dd)
de=np.vstack((b,a))#it join veritcally
print(de)
ko=np.arange(20)
import numpy as np

a = np.arange(10)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print("Original 1D Array:\n", a)
# Split into 5 equal parts
split_a = np.hsplit(a, 5)
print("Splitted 1D Array:", split_a)
uy=np.vsplit(a,2)#ValueError: vsplit only works on arrays of 2 or more dimensions
print(uy)
#=========================================================

#copy
n22=a.copy()
print(n22)
#--------------------------
#maths
print(nf+12)
print(hj*3)
print(nf.sum())
print(nf.min())
print(nf.max())
#--------------------------------------------
#random numbers print
ew=np.random.randint(120,size=(2,4))#print random numbers which is less then 120 with size of 2,4
print(ew)
#-----------------------------------------------------------------------------------------------------------------------------
#=================================================================================================================================
                                        #******************
                                            #EXERCISE
                                        #***********************

#----------------------------------------------------
#Array access
print(a[3])
print(b[1][3])
"""
print(n1, n2)

print(n1[1:4])  # Indexing values: [2 3 4]

print(n1 > 4)   # Boolean array: [False False False False  True]

print(n1 > 4)  # Values greater than 4: [5]
print(n1[n1>4])
print(n1 < 4)   # Boolean array: [ True  True  True False False]

# Corrected version with parentheses
print(n2[(n2 > 2) & (n2 <= 6)])  # This will print an empty array because no values satisfy both conditions
"""

print(a[0:4])
print(f,g)
print(a>3)
print(a[a>3])
print(a[(a>1) & (a>2)])
print(b[0,4])
b[0,4]=int(2.3)
print(b[0,4])
print(b==2)
print(b[(b!=12) & (b!=15)])



import numpy as np
num1=np.array([1,4,3,3,3,5,6,8,99,123])
print(num1[num1>2])
print(num1[num1<4])
print(num1[num1==3])
print(num1[(num1>2)&(num1<76)])











import numpy as n

an = n.array([1, 2, 3, 4, 6.6, 7.5, 23,3,3], dtype="int32")  # Creating a NumPy array

# Filtering elements greater than an[2] (which is 3) and greater than or equal to 3
print(an[(an > an[2]) & (an >= 3)])

# Corrected way to filter elements greater than 3
print(an[an > 3])
print(an[an==3])
#--------------------------------------------------------
#change dimensions & concat
"""


n4=n2[np.newaxis,:]#This adds a new axis to n2, converting it from a 1D array to a 2D array (essentially a row vector).
print(n4)
n5=np.array([[1,3,4,6,5,75]])
print(n5)
n6=np.concatenate( (n4, n5))
print(n6)
"""

import numpy as np
num1=np.array([[1,4,3,3,3],[5,6,8,99,123]])
num2=num1[np.newaxis,:]
print(num2)
dsa=ff[np.newaxis,:]
"""
The expression d[np.newaxis, :] is used in NumPy to add
 a new axis to the array 
d, effectively converting a 1D array into a 2D array 
(or increasing the dimensions of higher-dimensional arrays)
"""


import numpy as np

a = np.arange(8).reshape(2, 4)  # 2D array of shape (2,4)
print(a)
print(a[1, :])  # ✅ Second row
print(a[:, 1])  # ✅ Second column


import numpy as np 
a=np.arange(8).reshape(2,4)
b=np.array([[1,2,3,4],[0,9,8,7]])
c=np.concatenate((a,b))
e=c[np.newaxis,:]
print(e)

import numpy as np
a=np.arange(12).reshape(2,2,3)
print(a)

arr = np.array([1, 2, 3])
tiled_arr = np.tile(arr, 3)
print(tiled_arr)
